@model Dictionary<DateTime, Dictionary<int, double>>
@{
    ViewData["Title"] = "Listening Heatmap";
}
@{
    var allDates = ViewBag.AllDates as List<DateTime>;
}

<h2>@ViewData["Title"]</h2>

<style>
    .heatmap-table {
        width: 100%;
        border-collapse: collapse;
    }

        .heatmap-table th, .heatmap-table td {
            width: 1cm;
            height: 1cm;
            border: 1px solid #ddd;
            text-align: center;
            vertical-align: middle;
            border-radius: 0.2cm;
            background-color: #e5e3e3;
        }

        .heatmap-table th {
            background-color: #f4f4f4;
        }

    .color-bar {
        width: 1cm;
        height: 1cm;
        border-radius: 0.2cm;
        border: 1px solid #ddd;
    }

    .day-header {
        background-color: #f4f4f4;
        text-align: center;
        font-weight: bold;
    }
</style>

<table class="heatmap-table">
    <thead>
        <tr>
            <th class="day-header">Date</th>
            @for (int hour = 0; hour < 24; hour++)
            {
                <th>@hour:00</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var date in allDates)
        {
            var dateEntry = Model.ContainsKey(date) ? Model[date] : null;
            
            <tr>
                <td>@date.ToString("dd MMM")</td>
                @for (int hour = 0; hour < 24; hour++)
                {
                    double listeningTime = 0;
                    if (dateEntry != null)
                    {
                        if (dateEntry.ContainsKey(hour))
                        {
                            listeningTime = dateEntry[hour];
                        }
                    }

                    <td style="background-color:@GetHeatmapColor(listeningTime);">
                        &nbsp;
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@functions {
    private string GetHeatmapColor(double listeningTime)
    {
        var minutes = listeningTime / 60;
        var intensity = Math.Min(215, (int)(minutes * 215 / 60));
        var red = 215 - intensity;
        var blue = (int)(215 - (intensity / 1.45));

        return $"rgb({red}, 215, {blue})";
    }
}








